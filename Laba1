
public class NotCorrectlyDenominatorException : Exception
{
    public NotCorrectlyDenominatorException(string message) : base(message) { }
}

public class Fraction
{
    private int numerator;
    private int denominator;

    public int Numerator
    {
        get { return numerator; }
        set { numerator = value; }
    }

    public int Denominator
    {
        get { return denominator; }
        set
        {
            if (value == 0)
                throw new NotCorrectlyDenominatorException("Знаменатель не может быть равен 0");
            denominator = value;
        }
    }

    public double DecimalValue
    {
        get { return (double)numerator / denominator; }
    }

    public Fraction(int numerator, int denominator)
    {
        Denominator = denominator; // Используем свойство для проверки
        Numerator = numerator;
        Simplify();
    }

    private void Simplify()
    {
        int gcd = GCD(numerator, denominator);
        numerator /= gcd;
        denominator /= gcd;
    }

    private int GCD(int a, int b)
    {
        while (b != 0)
        {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return Math.Abs(a);
    }

    public static Fraction operator +(Fraction a, Fraction b)
    {
        return new Fraction(a.Numerator * b.Denominator + b.Numerator * a.Denominator, a.Denominator * b.Denominator);
    }

    public static Fraction operator -(Fraction a, Fraction b)
    {
        return new Fraction(a.Numerator * b.Denominator - b.Numerator * a.Denominator, a.Denominator * b.Denominator);
    }

    public static Fraction operator *(Fraction a, Fraction b)
    {
        return new Fraction(a.Numerator * b.Numerator, a.Denominator * b.Denominator);
    }

    public static Fraction operator /(Fraction a, Fraction b)
    {
        if (b.Numerator == 0)
            throw new NotCorrectlyDenominatorException("Деление на ноль");
        return new Fraction(a.Numerator * b.Denominator, a.Denominator * b.Numerator);
    }

    public override string ToString()
    {
        return $"{Numerator}/{Denominator}";
    }
}

class Program
{
    static void Main(string[] args)
    {
        try
        {
            Fraction fraction1 = new Fraction(1, 2);
            Fraction fraction2 = new Fraction(3, 4);

            Console.WriteLine($"Fraction 1: {fraction1}");
            Console.WriteLine($"Fraction 2: {fraction2}");

            Fraction sum = fraction1 + fraction2;
            Console.WriteLine($"Сумма: {sum}");

            Fraction difference = fraction1 - fraction2;
            Console.WriteLine($"Разность: {difference}");

            Fraction product = fraction1 * fraction2;
            Console.WriteLine($"Произведение: {product}");

            Fraction quotient = fraction1 / fraction2;
            Console.WriteLine($"Частное: {quotient}");

            Console.WriteLine($"Десятичное представление дроби 1: {fraction1.DecimalValue}");
            Console.WriteLine($"Десятичное представление дроби 2: {fraction2.DecimalValue}");
        }
        catch (NotCorrectlyDenominatorException ex)
        {
            Console.WriteLine($"Ошибка: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Произошла ошибка: {ex.Message}");
        }
    }
}
